@page "/"
@using DnD_Companion_blazor.Models
@using DnD_Companion_blazor.Components.Components.Stats


<div class="min-h-screen flex flex-col gap-2 justify-start">
    <div class="flex flex-col w-full justify-center items-center bg-slate-700 py-2 gap-2">
        <div class="flex w-full flex-row justify-around items-center">
            <div>
                <h3 class="text-2xl text-white font-bold">@character.Name</h3>
                <p class="text-lg text-gray-300">@character.Class</p>
            </div>

            @* hp *@
            <div class="flex flex-col items-center">
                <h3 class="text-2xl text-white font-bold">HP</h3>
                <div class="text-xl text-gray-300">@character.CurrentHitPoints/@character.MaxHitPoints</div>
                <MudProgressLinear Color="Color.Primary" Value="@(character.HitPointPercentage * 100)"/>
            </div>
        </div>
        <div class="flex w-full justify-around">
            @* proficieny bonus *@
            <div class="flex flex-col items-center ">
                <div class="text-lg text-white">@character.Stats.ProficiencyBonus</div>
                <h3 class="text-sm  text-gray-300 font-bold">Prof. Bonus</h3>
            </div>
            <div class="flex flex-col items-center ">
                <div class="text-lg text-white">@character.Speed</div>
                <h3 class="text-sm tex text-gray-300 font-bold">Speed</h3>
            </div>
            <div class="flex flex-col items-center ">
                <div class="text-lg text-white">@character.Initiative</div>
                <h3 class="text-sm  text-gray-300 font-bold">Initiative</h3>
            </div>
            <div class="flex flex-col items-center ">
                <div class="text-lg text-white">@character.ArmorClass</div>
                <h3 class="text-sm  text-gray-300 font-bold">Armor class</h3>
            </div>
        </div>
    </div>
    <div class="p-2">
        <StatsDisplay Stats="@character.Stats"/>
        <SavingThrows Stats="@character.Stats"/>

        <div class="flex flex-col">
            <h2 class="text-xl font-bold text-white">Skills</h2>
            <table class="w-full text-white">
                <thead>
                <tr>
                    <th class="text-center">Prof.</th>
                    <th class="text-left">Skill</th>
                    <th class="text-center">Bonus</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var skill in character.Skills)
                {
                    <tr>
                        <td class="text-center">@skill.Proficient</td>
                        <td>@skill.Name</td>
                        <td class="text-center">@character.GetSkillModifier(skill.Name)</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    private Character character = new Character(new Stats()
    {
        Strength = new Stat(10),
        Dexterity = new Stat(12),
        Constitution = new Stat(14),
        Intelligence = new Stat(16)
        {
            SaveProficiency = true
        },
        Wisdom = new Stat(18)
        {
            SaveProficiency = true
        },
        Charisma = new Stat(20)
    })
    {
        Name = "Gandalf",
        Class = "Wizard",
        MaxHitPoints = 20,
        CurrentHitPoints = 15,
    };

    private Stat GetAbility(string abilityName)
    {
        return abilityName switch
        {
            "Strength" => character.Stats.Strength,
            "Dexterity" => character.Stats.Dexterity,
            "Constitution" => character.Stats.Constitution,
            "Intelligence" => character.Stats.Intelligence,
            "Wisdom" => character.Stats.Wisdom,
            "Charisma" => character.Stats.Charisma,
            _ => throw new ArgumentException("Invalid ability name")
        };
    }

    private string GetAbilityModifier(string abilityName)
    {
        int modifier = abilityName switch
        {
            "Strength" => character.Stats.Strength.Modifier,
            "Dexterity" => character.Stats.Dexterity.Modifier,
            "Constitution" => character.Stats.Constitution.Modifier,
            "Intelligence" => character.Stats.Intelligence.Modifier,
            "Wisdom" => character.Stats.Wisdom.Modifier,
            "Charisma" => character.Stats.Charisma.Modifier,
            _ => 0
        };
        return modifier >= 0 ? $"+{modifier}" : modifier.ToString();
    }

}